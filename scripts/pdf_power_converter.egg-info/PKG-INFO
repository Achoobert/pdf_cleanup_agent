Metadata-Version: 2.4
Name: pdf-power-converter
Version: 1.0.0
Summary: Convert PDFs to structured markdown using AI
Home-page: https://github.com/yourusername/pdf-power-converter
Author: PDF Power Converter Team
Author-email: PDF Power Converter Team <contact@pdfpowerconverter.com>
Maintainer-email: PDF Power Converter Team <contact@pdfpowerconverter.com>
License: MIT
Project-URL: Homepage, https://github.com/yourusername/pdf-power-converter
Project-URL: Repository, https://github.com/yourusername/pdf-power-converter
Project-URL: Documentation, https://github.com/yourusername/pdf-power-converter/wiki
Project-URL: Bug Reports, https://github.com/yourusername/pdf-power-converter/issues
Project-URL: Changelog, https://github.com/yourusername/pdf-power-converter/blob/main/CHANGELOG.md
Keywords: pdf,converter,markdown,ai,llm,document,processing
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Office/Business :: Office Suites
Classifier: Topic :: Text Processing :: Markup
Classifier: Topic :: Utilities
Classifier: Environment :: X11 Applications :: Qt
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyQt5>=5.15.0
Requires-Dist: PyPDF2>=3.0.0
Requires-Dist: pdfplumber>=0.9.0
Requires-Dist: openai>=1.0.0
Requires-Dist: anthropic>=0.7.0
Requires-Dist: tiktoken>=0.5.0
Requires-Dist: requests>=2.28.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: colorlog>=6.7.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-qt>=4.2.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Provides-Extra: build
Requires-Dist: pyinstaller>=5.0.0; extra == "build"
Requires-Dist: cx_Freeze>=6.0.0; extra == "build"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# PDF Power Converter

A powerful tool for converting PDF documents into structured markdown format using AI-powered processing.

## Quick Start

```bash
# Run the GUI application
python main.py

# Or run from scripts directory
python scripts/ui/main.py

# Command line processing
python scripts/pdf_process_pipeline.py <pdf_path>
python scripts/postprocess_pipeline.py <markdown_dir>
```

## Project Structure

```
pdf_cleanup_agent/
├── agent.py              # Main processing script
├── agent_stream.py       # Streaming version for large documents
├── pdf_segmenter.py      # PDF segmentation tool
├── hello_world.py        # Test script for Ollama connection
├── run_tests.py          # Test runner script
├── prompt.txt            # AI prompt template
├── tests/                # Test suite
│   ├── __init__.py
│   ├── test_agent.py     # Tests for main agent
│   ├── test_agent_stream.py  # Tests for streaming agent
│   ├── test_hello_world.py   # Tests for connectivity
│   └── test_pdf_segmenter.py # Tests for PDF segmentation
├── data/
│   ├── txt_input/        # Input text files 
│   ├── pdf/              # Input PDF files 
│   ├── markdown/         # Input markdown files 
│   └── output/           # Generated output files 
```

## Setup

1. Install Python dependencies:
   ```bash
   python3 -m venv venv
   source venv/bin/activate  # On Windows use: venv\Scripts\activate
   pip install -r requirements.txt
   ```

2. Install and start Ollama:
   ```bash
   # Install Ollama from https://ollama.ai
   ollama pull deepseek-r1
   ollama serve
   ```

3. Test the connection:
   ```bash
   python hello_world.py
   ```

## Usage

### PDF Segmentation

Segment RPG rulebooks into sections based on table of contents:

```bash
# Basic segmentation using TOC
python pdf_segmenter.py data/pdf/your_rulebook.pdf

# Custom output directory
python pdf_segmenter.py data/pdf/your_rulebook.pdf --output-dir data/txt_input

# Fallback to page-based segmentation (if no TOC)
python pdf_segmenter.py data/pdf/your_rulebook.pdf --pages-per-section 15
```

The script will:
- Extract the table of contents from your PDF
- Split the PDF into sections based on TOC entries
- Convert each section to text using PyMuPDF (works with most modern PDFs)
- Save each section as a separate `.txt` file in `data/txt_input/`

**Note:** This tool works best with PDFs that have embedded text (most modern PDFs). For scanned/image-only PDFs, you may need to use a different tool with OCR capabilities.

### Text Processing

1. Place your input text file in `data/txt_input/input.txt` (or use segmented files)
2. Create a `prompt.txt` file with your AI instructions
3. Run the processing script:
   ```bash
   # For regular processing
   python agent.py
   
   # For large documents (streaming)
   python agent_stream.py
   ```

4. Find your output in `data/output/output.md`

## Testing and Build Automation

The project includes a comprehensive build and test automation system:

### Automated Build and Test

```bash
# Build and test everything (recommended)
python build_and_test.py

# Or use the convenience scripts
./scripts/build/quick_test.sh          # macOS/Linux
scripts\build\quick_test.bat           # Windows

# Watch mode for development
python build_and_test.py --watch

# Build only (no tests)
python build_and_test.py --build-only --platforms source wheel exe

# Test only (no builds)
python build_and_test.py --test-only --verbose
```

### What Gets Tested

1. **Unit Tests**: All component unit tests
2. **Integration Tests**: Cross-component integration tests  
3. **E2E Tests**: End-to-end tests against built distributions
4. **Performance Tests**: Startup time, memory usage, regression detection
5. **Build Tests**: Verify all distribution formats build correctly

### Running Tests Manually

```bash
# Run all tests
python run_tests.py

# Run specific test modules
python -m unittest tests.test_agent -v
python -m unittest tests.test_agent_stream -v
python -m unittest tests.test_hello_world -v
python -m unittest tests.test_pdf_segmenter -v

# Run new UI tests
python -m pytest scripts/tests/ -v
```

### Test Coverage

The test suite covers:
- ✅ API connectivity and error handling
- ✅ File operations and directory creation
- ✅ Text chunking and streaming functionality
- ✅ Prompt processing and formatting
- ✅ PDF segmentation functionality
- ✅ Error scenarios and edge cases

### Continuous Integration

Tests automatically run on:
- Every push to main/master branch
- Every pull request
- Multiple Python versions (3.8, 3.9, 3.10, 3.11)

## Copyright Protection

This repository is configured to prevent accidental commits of copyrighted content:
- All `.txt`, `.pdf`, and `.md` files are excluded from git
- Data directories are preserved with `.gitkeep` files
- Only the directory structure is tracked, not the content

## Configuration

- **Model**: set `MODEL = "deepseek-r1"` in the scripts to use a different Ollama model
- **Chunk Size**: set `CHUNK_SIZE = 3000` in `agent_stream.py` for different document sizes
- **API Endpoint**: Modify `OLLAMA_API` if using a remote Ollama instance 
